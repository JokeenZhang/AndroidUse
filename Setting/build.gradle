apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.zzq.setting"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        dataBinding = true
//        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    signingConfigs {
        release {
            def releaseKeyFile = file('../keyStore/release.properties')
            if (releaseKeyFile.canRead()) {
                Properties props = new Properties()
                props.load(new FileInputStream(releaseKeyFile))
                if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                } else {
                    println 'signing.properties found but some entries are missing'
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                println 'signing.properties not found'
                android.buildTypes.release.signingConfig = null
            }
        }

        debug {
            def debugKeyFile = file('../keyStore/debug.properties')
            if (debugKeyFile.canRead()) {
                Properties props = new Properties()
                props.load(new FileInputStream(debugKeyFile))
                if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                } else {
                    println 'signing.properties found but some entries are missing'
                    android.buildTypes.debug.signingConfig = null
                }
            } else {
                println 'signing.properties not found'
                android.buildTypes.debug.signingConfig = null
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    testImplementation deps.test.junit
    androidTestImplementation deps.test.ext_junit
    androidTestImplementation deps.espresso.core
    implementation deps.app_compat
    implementation deps.core_ktx
    implementation deps.kotlin.stdlib
    implementation deps.androidx_view.constraintlayout
    implementation project(path: ':common')

}

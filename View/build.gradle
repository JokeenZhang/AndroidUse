apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.zzq.view"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //命名变体维度。所有变种都必须属于一个指定的变种维度，即一个产品变种组
    flavorDimensions "function"

    //配置产品变种
    productFlavors {

        customView {
            //自定义View
            dimension "function"
            versionNameSuffix "-customView"
        }

        full {
            //全部功能，默认使用这个变体
            dimension "function"

        }
    }

    signingConfigs {
        release {
            def releaseKeyFile = file('../keyStore/release.properties')
            if (releaseKeyFile.canRead()) {
                Properties props = new Properties()
                props.load(new FileInputStream(releaseKeyFile))
                if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                } else {
                    println 'signing.properties found but some entries are missing'
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                println 'signing.properties not found'
                android.buildTypes.release.signingConfig = null
            }
        }

        debug {
            def debugKeyFile = file('../keyStore/debug.properties')
            if (debugKeyFile.canRead()) {
                Properties props = new Properties()
                props.load(new FileInputStream(debugKeyFile))
                if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                } else {
                    println 'signing.properties found but some entries are missing'
                    android.buildTypes.debug.signingConfig = null
                }
            } else {
                println 'signing.properties not found'
                android.buildTypes.debug.signingConfig = null
            }
        }
    }

    buildTypes {
        release {
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            debuggable false
            //开发阶段设为true
            buildConfigField "boolean", "isDebug", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            buildConfigField "boolean", "isDebug", "true"
            signingConfig signingConfigs.debug

            versionNameSuffix "-debug"
            zipAlignEnabled false
            shrinkResources false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {

        customView {
//            java.srcDirs = ['src/customView/java']
            manifest.srcFile 'src/customView/AndroidManifest.xml'
        }
    }

    //apk命名
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date().format("yyyyMMdd HHmmss", TimeZone.getTimeZone("GMT+08"))
            outputFileName = "zzqView_in-${variant.name}_v${defaultConfig.versionName}_${buildType.name}_in${date}.apk"
        }
    }

    buildFeatures {
        dataBinding = true
    }

    //过滤不需要的构建变体
    variantFilter { variant ->
        def names = variant.flavors*.name
        def buildTypeName = variant.buildType.name

        if (buildTypeName.contains("release")) {
            //customViewRelease不需要。
            if (names.contains("customView")) {
                setIgnore(true)
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation project(path: ':common')
}

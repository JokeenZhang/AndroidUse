apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.zzq.gradlebuild"
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName "v1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    //命名变体维度。所有变种都必须属于一个指定的变种维度，即一个产品变种组
    flavorDimensions "side", "api"

    //配置产品变种
    productFlavors {

        inside {
            //内部使用
            dimension "side"
            applicationIdSuffix ".inside"
        }

        outside {
            //外部使用
            dimension "side"
            applicationIdSuffix ".outside"
        }

        api21 {
            dimension "api"
        }

        api29 {
            dimension "api"
        }

        api30 {
            dimension "api"
        }

    }

    signingConfigs {
        release {
            def releaseKeyFile = file('../keyStore/release.properties')
            if (releaseKeyFile.canRead()) {
                Properties props = new Properties()
                props.load(new FileInputStream(releaseKeyFile))
                if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                } else {
                    println 'signing.properties found but some entries are missing'
                    android.buildTypes.release.signingConfig = null
                }
            } else {
                println 'signing.properties not found'
                android.buildTypes.release.signingConfig = null
            }
        }

        debug {
            def debugKeyFile = file('../keyStore/debug.properties')
            if (debugKeyFile.canRead()) {
                Properties props = new Properties()
                props.load(new FileInputStream(debugKeyFile))
                if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                } else {
                    println 'signing.properties found but some entries are missing'
                    android.buildTypes.debug.signingConfig = null
                }
            } else {
                println 'signing.properties not found'
                android.buildTypes.debug.signingConfig = null
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
        }

        releaseToTest {
            initWith release
            applicationIdSuffix ".test.release"
            matchingFallbacks = ['release']
        }
    }

    sourceSets {

        main {
//            java.srcDirs += ['src/main/java']
            java.srcDirs += ['src/main/api21']
            java.srcDirs += ['src/main/api29']
            java.srcDirs += ["src/main/api30"]
        }

        outside {
            java.srcDirs = ['src/outside/java']
        }

        inside {
            java.srcDirs = ['src/inside/java']
        }
    }

    //apk命名
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08"))
            outputFileName = "GradleBuild_To-${variant.name}_v${defaultConfig.versionName}_${buildType.name}_in${date}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(path: ':common')
}

//对apk进行签名
//def doAppSign(boolean isRelease) {
//    if (isRelease) {
//        def releaseKeyFile = file('../keyStore/release.properties')
//        if (releaseKeyFile.canRead()) {
//            Properties props = new Properties()
//            props.load(new FileInputStream(releaseKeyFile))
//            if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
//                    props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
//                android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
//                android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
//                android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
//                android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
//            } else {
//                println 'signing.properties found but some entries are missing'
//                android.buildTypes.release.signingConfig = null
//            }
//        } else {
//            println 'signing.properties not found'
//            android.buildTypes.release.signingConfig = null
//        }
//    } else {
//        def debugKeyFile = file('../keyStore/debug.properties')
//        if (debugKeyFile.canRead()) {
//            Properties props = new Properties()
//            props.load(new FileInputStream(debugKeyFile))
//            if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
//                    props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
//                android.signingConfigs.debug.storeFile = file(props['STORE_FILE'])
//                android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
//                android.signingConfigs.debug.keyAlias = props['KEY_ALIAS']
//                android.signingConfigs.debug.keyPassword = props['KEY_PASSWORD']
//            } else {
//                println 'signing.properties found but some entries are missing'
//                android.buildTypes.debug.signingConfig = null
//            }
//        } else {
//            println 'signing.properties not found'
//            android.buildTypes.debug.signingConfig = null
//        }
//    }
//}
